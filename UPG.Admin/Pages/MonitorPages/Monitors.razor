@page "/monitors"


<MudTable Items="@Elements" Dense="true" Hover="true" Bordered="true" Striped="true" Filter="new Func<MonitorDto,bool>(FilterFunc1)" @bind-SelectedItem="selectedItem1">
    <ToolBarContent>
        <MudText Typo="Typo.h6">Monitors</MudText>
        <MudSpacer />
        <MudTextField @bind-Value="searchString1" Placeholder="Search" Adornment="Adornment.Start" AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium" Class="mt-0"></MudTextField>
        <MudSpacer />
        <MudButton OnClick="AddPage" StartIcon="@Icons.Material.Filled.Add" Variant="Variant.Outlined" Color="Color.Success">Create</MudButton>
    </ToolBarContent>
    <HeaderContent>
        <MudTh>id</MudTh>
        <MudTh>Name</MudTh>
        <MudTh>Brand name</MudTh>
        <MudTh>Price</MudTh>
        <MudTh>Action</MudTh>
    </HeaderContent>
    <RowTemplate>
        <MudTd @onclick="() => OpenView(context.Id)" DataLabel="id">@context.Id</MudTd>
        <MudTd @onclick="() => OpenView(context.Id)" DataLabel="Brand name">@context.BrandName</MudTd>
        <MudTd @onclick="() => OpenView(context.Id)" DataLabel="Name">@context.Name</MudTd>
        <MudTd @onclick="() => OpenView(context.Id)" DataLabel="Price">@context.Price</MudTd>
        <MudTd @onclick="() => OpenView(context.Id)" DataLabel="Action" style="display: flex; justify-content:center; gap: 10px">
            <MudIconButton @onclick="() => OpenEditPage(context.Id)" Icon="@Icons.Material.Filled.Edit" Variant="Variant.Filled" Color="Color.Primary" Size="Size.Medium" />
            <MudIconButton @onclick="() => Delete(context.Id)" Icon="@Icons.Material.Filled.Delete" Variant="Variant.Filled" Color="Color.Error" Size="Size.Medium" />
        </MudTd>
    </RowTemplate>
    <PagerContent>
        <MudTablePager />
    </PagerContent>
</MudTable>

@code {
    @inject HttpClient httpClient
    private string searchString1 = "";
    private MonitorDto selectedItem1 = null;
    @inject NavigationManager navigate
    @inject IDialogService DialogService
    @inject ISnackbar Snackbar

    private List<MonitorDto> Elements = new List<MonitorDto>();

    protected override async Task OnInitializedAsync()
    {
        var response = await httpClient.GetAsync(Helper.URL + "monitors");
        if (response.IsSuccessStatusCode)
        {
            Elements = await response.Content.ReadFromJsonAsync<List<MonitorDto>>();
        }
    }

    private bool FilterFunc1(MonitorDto element) => FilterFunc(element, searchString1);

    private bool FilterFunc(MonitorDto element, string searchString)
    {
        if (string.IsNullOrWhiteSpace(searchString))
            return true;
        if (element.BrandName.Contains(searchString, StringComparison.OrdinalIgnoreCase))
            return true;
        if (element.Name.Contains(searchString, StringComparison.OrdinalIgnoreCase))
            return true;
        return false;
    }

    private void AddPage()
    {
        navigate.NavigateTo("monitors/add");
    }
    private void OpenView(int id)
    {
        var parameters = new DialogParameters<View>();
        parameters.Add(x => x.Id, id.ToString());
        var options = new DialogOptions() { CloseButton = true, MaxWidth = MaxWidth.Medium, FullWidth = true };

        DialogService.Show<View>("Monitor details", parameters, options);
    }

    private void OpenEditPage(int id)
    {
        navigate.NavigateTo($"monitors/edit/{id}");
    }

    private async void Delete(int id)
    {
        var options = new DialogOptions { ClassBackground = "body" };
        var dialogResult = await DialogService.Show<YesNo>("Delete", options).Result;

        if (!dialogResult.Cancelled)
        {
            var response = await httpClient.DeleteAsync(Helper.URL + "monitors/" + id);
            if (response.IsSuccessStatusCode)
            {
                Snackbar.Add("Monitor successfully deleted!", Severity.Success);
                Elements.RemoveAll(i => i.Id == id);
                StateHasChanged();
            }
            else if (response.StatusCode == System.Net.HttpStatusCode.NotFound)
            {
                Snackbar.Add("Monitor not found!", Severity.Warning);
                navigate.NavigateTo("/monitors");
            }
            else
            {
                Snackbar.Add("Some problem with the server", Severity.Error);
                navigate.NavigateTo("/monitors");
            }
        }
    }
}