@page "/monitors/edit/{Id}"

<MudGrid>
    <MudItem xs="2"></MudItem>
    <MudItem xs="8">
        <MudCard Class="mt-4">
            <MudCardHeader Class="d-flex justify-center"> <h3>Edit this Monitor</h3> </MudCardHeader>
            <MudCardContent>
                <MudGrid>
                    <MudItem xs="6">
                        <MudTextField @bind-Value="monitor.Name" Label="Name" Variant="Variant.Outlined" Margin="Margin.Dense" Class="mt-4"></MudTextField>
                        <MudTextField @bind-Value="monitor.BrandName" Label="Brand name" Variant="Variant.Outlined" Margin="Margin.Dense" Class="mt-4"></MudTextField>
                        <MudTextField @bind-Value="monitor.Price" Label="Price" Variant="Variant.Outlined" Margin="Margin.Dense" Class="mt-4"></MudTextField>
                        <MudTextField @bind-Value="monitor.Diagonal" Label="Diagonal" Variant="Variant.Outlined" Margin="Margin.Dense" Class="mt-4"></MudTextField>
                        <MudTextField @bind-Value="monitor.Screen_type" Label="Screen type" Variant="Variant.Outlined" Margin="Margin.Dense" Class="mt-4"></MudTextField>
                        <MudTextField @bind-Value="monitor.Matrix_type" Label="Matrix type" Variant="Variant.Outlined" Margin="Margin.Dense" Class="mt-4"></MudTextField>
                        <MudTextField @bind-Value="monitor.Resolution_FHD" Label="Resolution FHD" Variant="Variant.Outlined" Margin="Margin.Dense" Class="mt-4"></MudTextField>
                        <MudTextField @bind-Value="monitor.Aspect_ratio" Label="Aspect ratio" Variant="Variant.Outlined" Margin="Margin.Dense" Class="mt-4"></MudTextField>
                        <MudTextField @bind-Value="monitor.Frame_rate" Label="Frame rate" Variant="Variant.Outlined" Margin="Margin.Dense" Class="mt-4"></MudTextField>
                    </MudItem>
                    <MudItem xs="6">
                        <MudTextField @bind-Value="monitor.Viewing_angle" Label="Viewing angle" Variant="Variant.Outlined" Margin="Margin.Dense" Class="mt-4"></MudTextField>
                        <MudTextField @bind-Value="monitor.Interface" Label="Interface" Variant="Variant.Outlined" Margin="Margin.Dense" Class="mt-4"></MudTextField>
                        <MudTextField @bind-Value="monitor.VESA_Mount" Label="VESA Mount" Variant="Variant.Outlined" Margin="Margin.Dense" Class="mt-4"></MudTextField>
                        <MudTextField @bind-Value="monitor.Technologies" Label="Technologies" Variant="Variant.Outlined" Margin="Margin.Dense" Class="mt-4"></MudTextField>
                        <MudTextField @bind-Value="monitor.Adjustment" Label="Adjustment" Variant="Variant.Outlined" Margin="Margin.Dense" Class="mt-4"></MudTextField>
                        <MudItem Class="d-flex">
                            <MudSwitch @bind-Value="monitor.HDR" ThumbIcon="@(monitor.HDR==true ? Icons.Material.Filled.Done : Icons.Material.Filled.Close)" ThumbIconColor="@(monitor.HDR==true ? Color.Success : Color.Error)">HDR</MudSwitch>
                            <MudSwitch Class="mx-10" @bind-Value="monitor.Guarantee_period" ThumbIcon="@(monitor.Guarantee_period==true ? Icons.Material.Filled.Done : Icons.Material.Filled.Close)" ThumbIconColor="@(monitor.Guarantee_period==true ? Color.Success : Color.Error)">Guarantee period</MudSwitch>
                        </MudItem>
                    </MudItem>
                </MudGrid>
                <MudTextField @bind-Value="monitor.Description" Lines="5" Label="Description" Variant="Variant.Outlined" Margin="Margin.Dense" Class="mt-4"></MudTextField>
            </MudCardContent>
            <MudCardActions Class="d-flex justify-center">
                <MudButton @onclick="Cancel" Variant="Variant.Filled">Cancel</MudButton>
                <MudButton @onclick="Save" Class="ms-2" Variant="Variant.Filled" Color="Color.Primary">Save</MudButton>
            </MudCardActions>
        </MudCard>
    </MudItem>
    <MudItem xs="2"></MudItem>
</MudGrid>

@code {
    [Parameter]
    public string Id { get; set; }

    @inject NavigationManager navigation
    @inject HttpClient httpClient
    @inject ISnackbar Snackbar
    UpdateMonitorDto monitor = new();

    protected override async Task OnInitializedAsync()
    {
        var response = await httpClient.GetAsync(Helper.URL + "monitors/" + Id);
        if (response.IsSuccessStatusCode)
        {
            var monitorDto = await response.Content.ReadFromJsonAsync<MonitorDto>();
            monitor = new()
            {
                Id = monitorDto!.Id,
                Name = monitorDto.Name,
                Price = monitorDto.Price,
                Description = monitorDto.Description,
                BrandName = monitorDto.BrandName,
                Diagonal = monitorDto.Diagonal,
                Screen_type = monitorDto.Screen_type,
                Matrix_type = monitorDto.Matrix_type,
                Resolution_FHD = monitorDto.Resolution_FHD,
                Aspect_ratio = monitorDto.Aspect_ratio,
                Frame_rate = monitorDto.Frame_rate,
                Response_time = monitorDto.Response_time,
                Viewing_angle = monitorDto.Viewing_angle,
                Interface = monitorDto.Interface,
                VESA_Mount = monitorDto.VESA_Mount,
                Technologies = monitorDto.Technologies,
                Adjustment = monitorDto.Adjustment,
                HDR = monitorDto.HDR,
                Guarantee_period = monitorDto.Guarantee_period,
                ImageUrls = monitorDto.ImageUrls
            };
        }
    }

    private void Cancel()
    {
        navigation.NavigateTo("/monitors");
    }

    private async void Save()
    {
        var updateMonitorJson = JsonConvert.SerializeObject(monitor);
        var request = new StringContent(updateMonitorJson, Encoding.UTF8, "application/json");

        var response = await httpClient.PutAsync(Helper.URL + "monitors", request);

        if (response.IsSuccessStatusCode)
        {
            Snackbar.Add("Monitor updated successfully!", Severity.Success);
            Cancel();
        }
        else if (response.StatusCode == System.Net.HttpStatusCode.NotFound)
        {
            Snackbar.Add("Monitor not found. Please try again!", Severity.Warning);
            Cancel();
        }
        else if (response.StatusCode == System.Net.HttpStatusCode.BadRequest)
        {
            Snackbar.Add("Informations isn't valid", Severity.Warning);
            Cancel();
        }
        else
        {
            Snackbar.Add("Some problem with the server", Severity.Error);
            Cancel();
        }
    }
}