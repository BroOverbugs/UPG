@page "/mousepads/edit/{Id}"

<MudGrid>
    <MudItem xs="2"></MudItem>
    <MudItem xs="8">
        <MudCard Class="mt-4">
            <MudCardHeader Class="d-flex justify-center"> <h3>Edit this MousePad</h3> </MudCardHeader>
            <MudCardContent>
                <MudGrid>
                    <MudItem>
                        <MudTextField @bind-Value="mousePad.Name" Label="Name" Variant="Variant.Outlined" Margin="Margin.Dense" Class="mt-4"></MudTextField>
                        <MudTextField @bind-Value="mousePad.BrandName" Label="Brand name" Variant="Variant.Outlined" Margin="Margin.Dense" Class="mt-4"></MudTextField>
                        <MudTextField @bind-Value="mousePad.Price" Label="Price" Variant="Variant.Outlined" Margin="Margin.Dense" Class="mt-4"></MudTextField>
                        <MudTextField @bind-Value="mousePad.Dimensions" Label="Dimensions" Variant="Variant.Outlined" Margin="Margin.Dense" Class="mt-4"></MudTextField>
                        <MudTextField @bind-Value="mousePad.Material" Label="Material" Variant="Variant.Outlined" Margin="Margin.Dense" Class="mt-4"></MudTextField>
                    </MudItem>

                </MudGrid>
                <MudTextField @bind-Value="mousePad.Description" Lines="5" Label="Description" Variant="Variant.Outlined" Margin="Margin.Dense" Class="mt-4"></MudTextField>
            </MudCardContent>
            <MudCardActions Class="d-flex justify-center">
                <MudButton @onclick="Cancel" Variant="Variant.Filled">Cancel</MudButton>
                <MudButton @onclick="Save" Class="ms-2" Variant="Variant.Filled" Color="Color.Primary">Save</MudButton>
            </MudCardActions>
        </MudCard>
    </MudItem>
    <MudItem xs="2"></MudItem>
</MudGrid>

@code {
    [Parameter]
    public string Id { get; set; }

    @inject NavigationManager navigation
    @inject HttpClient httpClient
    @inject ISnackbar Snackbar
    UpdateMousePadsDTO mousePad = new();

    protected override async Task OnInitializedAsync()
    {
        var response = await httpClient.GetAsync(Helper.URL + "mousepads/" + Id);
        if (response.IsSuccessStatusCode)
        {
            var mousePadDto = await response.Content.ReadFromJsonAsync<MousePadsDTO>();
            mousePad = new()
            {
                ID = mousePadDto!.ID,
                Name = mousePadDto.Name,
                BrandName = mousePadDto.BrandName,
                Price = mousePadDto.Price,
                Dimensions = mousePadDto.Dimensions,
                Material = mousePadDto.Material,
                Description = mousePadDto.Description
            };
        }
    }

    private void Cancel()
    {
        navigation.NavigateTo("/mousepads");
    }

    private async void Save()
    {
        var updateMousePadJson = JsonConvert.SerializeObject(mousePad);
        var request = new StringContent(updateMousePadJson, Encoding.UTF8, "application/json");

        var response = await httpClient.PutAsync(Helper.URL + "mousepads", request);

        if (response.IsSuccessStatusCode)
        {
            Snackbar.Add("Mouse pad updated successfully!", Severity.Success);
            Cancel();
        }
        else if (response.StatusCode == System.Net.HttpStatusCode.NotFound)
        {
            Snackbar.Add("Mouse pad not found. Please try again!", Severity.Warning);
            Cancel();
        }
        else if (response.StatusCode == System.Net.HttpStatusCode.BadRequest)
        {
            Snackbar.Add("Informations isn't valid", Severity.Warning);
            Cancel();
        }
        else
        {
            Snackbar.Add("Some problem with the server", Severity.Error);
            Cancel();
        }
    }
}